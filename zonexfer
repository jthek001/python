#!/usr/bin/env python
'''
----------------------------------
Comments
----------------------------------
'''
import sys
import bigsuds as bs
import time

def pause():
        try:
                input("PRESS ENTER TO CONTINUE.")
        except SyntaxError:
                pass
# sys.argv
# The list of command line arguments passed to a Python script. argv[0] is the script name (it is operating system dependent whether this is a full pathname or not). 
#If the command was executed using the -c command line option to the interpreter, argv[0] is set to the string '-c'. 
# If no script name was passed to the Python interpreter, argv[0] is the empty string.

if len(sys.argv) < 8:
    print "Usage %s big-ip_mgmt_ip_address username password dnsserver zone_type zone_name view_name" % sys.argv[0]
    sys.exit()
        
# sys.exit([arg])
# Exit from Python. This is implemented by raising the SystemExit exception, so cleanup actions specified by finally clauses of try statements are honored, 
# and it is possible to intercept the exit attempt at an outer level. The optional argument arg can be an integer giving the exit status (defaulting to zero), 
# or another type of object. If it is an integer, zero is considered “successful termination” and any nonzero value is considered “abnormal termination” by shells and 
# the like. Most systems require it to be in the range 0-127, and produce undefined results otherwise. Some systems have a convention for assigning specific meanings to 
# specific exit codes, but these are generally underdeveloped; Unix programs generally use 2 for command line syntax errors and 1 for all other kind of errors. 
# If another type of object is passed, None is equivalent to passing zero, and any other object is printed to sys.stderr and results in an exit code of 1.
#  In particular, sys.exit("some error message") is a quick way to exit a program when an error occurs.

a = sys.argv[1:]

b = bs.BIGIP(
        hostname = a[0],
        username = a[1],
        password = a[2]
)

dnsserver = a[3]
zone_type = a[4]
zone_name = a[5]
view_name = a[6]

zone_file = "db." + view_name + "." + zone_name option_seq = "masters {" + dnsserver + ";};"

# Setup a shortcut to the Zone
z = b.Management.Zone

print "Transferring Zones...."
try:
        z.transfer_zone(
                [dnsserver],
                [zone_name],
                [view_name],
                [{'zone_type': zone_type, 'zone_name': zone_name, 'view_name': view_name, 'zone_file': zone_file, 'option_seq': [option_seq]}]
        )
except Exception, e:
    print "Error transferring Zones %s" % zone_name
    print e
